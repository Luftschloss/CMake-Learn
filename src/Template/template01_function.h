
//两阶段编译检查（Two-Phase Translation ）
/* 在模板定义阶段，模板的检查并不包含类型参数的检查。只包含下面几个方面：
 >> 语法检查。比如少了分号。
 >> 使用了未定义的不依赖于模板参数的名称（类型名，函数名，......）。
 >> 未使用模板参数的 static assertions*/
//在模板实例化阶段，为确保所有代码都是有效的，模版会再次被检查，尤其是那些依赖于类型参数的部分。如下

template <typename T>
void Foo(T t) {
	undeclared();	//若undeclared未定义，第一阶段就会报错
	undeclared(t);  //若undeclared(t)未定义，第二阶段才会报错，因为undeclared(t)依赖于模板参数
	
	static_assert(sizeof(int) > 10, "int too small"); // 总是报错
	static_assert(sizeof(T) > 10, "T to small") // 依赖于模板参数，只有在第二阶段才会报错
}

//需要注意的是，有些编译器并不会执行第一阶段中的所有检查。因此如果模板没有被至少实例化一次的话，你可能一直都不会发现代码中的常规错误

//编译和连接，因为当实例化一个模版时，编译器需要看到模版的完整定义，所以模版的定义通常都放在头文件中，而不是放在源文件中

//模版参数推断